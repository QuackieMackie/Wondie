plugins {
    id 'java'
    id 'application'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'com.gradleup.shadow' version '8.3.1'
    id("co.uzzu.dotenv.gradle") version "4.0.0"
}

group = 'net.pathoscraft.pathosbot'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.dv8tion:JDA:5.2.1'
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.16'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.16'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    mainClass = 'net.pathos.pathosbot.PathosBot'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    sourceCompatibility = '1.8'
}

shadowJar {
    archiveBaseName.set(project.name)
    archiveClassifier.set("fat")
    archiveVersion.set(version)
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }

    doLast {
        ssh.run {
            session(remotes.pi) {
                execute 'echo Hello World'
            }
        }
    }
}

remotes {
    pi {
        host = System.getenv().PI_HOST
        user = System.getenv().PI_USER
        identity = file(System.getProperty('user.home') + '/.ssh/id_rsa')
    }
}

tasks.register('testConnection') {
    group = 'Pathos Bot'
    description = ''

    doLast {
        ssh.run {
            session(remotes.pi) {
                execute 'echo Hello World!'
            }
        }
    }
}